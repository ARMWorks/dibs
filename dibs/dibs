#!/bin/bash

if [[ -z "$DIBS_ROOT" ]] ; then
	echo "DIBS_ROOT is not set."
	exit 1
fi

if [[ $(id -u) -ne 0 ]] ; then
	echo "This script should be ran as root."
	exit 1
fi

if [[ "$DIBS_ROOT" == "$PWD" ]] ; then
	echo "Cannot work in DIBS root. Please create a directory to use as a DIBS_WORKSPACE."
	exit 1
fi

source "$DIBS_ROOT/dibs/packages"
source "$DIBS_ROOT/dibs/system"
source "$DIBS_ROOT/dibs/network"
if [[ -f "$DIBS_WORKSPACE/board/config" ]] ; then
	source "$DIBS_WORKSPACE/board/config"
fi

function require_workspace()
{
	if [[ -z "$DIBS_WORKSPACE" ]] || [[ ! -f "$DIBS_WORKSPACE/.dibs_workspace" ]]; then
		echo "DIBS workspace not found. Try creating a directory and run \"dibs board\"."
		exit 1
	fi

	export KCONFIG_CONFIG="$DIBS_WORKSPACE/config/config"
}

function require_config()
{
	require_workspace

	if [[ ! -f "$KCONFIG_CONFIG" ]] ; then
		echo "Config not found. Try \"dibs config\"."
		exit 1
	fi

	source "$KCONFIG_CONFIG"

	CONFIG_ARCH=
	if [[ "y" == "$CONFIG_ARCH_AMD64" ]] ; then
		CONFIG_ARCH="amd64"
	elif [[ "y" == "$CONFIG_ARCH_ARM64" ]] ; then
		CONFIG_ARCH="arm64"
	elif [[ "y" == "$CONFIG_ARCH_ARMEL" ]] ; then
		CONFIG_ARCH="armel"
	elif [[ "y" == "$CONFIG_ARCH_ARMHF" ]] ; then
		CONFIG_ARCH="armhf"
	elif [[ "y" == "$CONFIG_ARCH_I386" ]] ; then
		CONFIG_ARCH="i386"
	fi

	CONFIG_DISTRO=
	CONFIG_RELEASE=
	if [[ "y" == "$CONFIG_DISTRO_DEBIAN" ]] ; then
		CONFIG_DISTRO="debian"
		if [[ "y" == "$CONFIG_RELEASE_DEBIAN_WHEEZY" ]]; then
			CONFIG_RELEASE="wheezy"
		elif [[ "y" == "$CONFIG_RELEASE_DEBIAN_JESSIE" ]]; then
			CONFIG_RELEASE="jessie"
		elif [[ "y" == "$CONFIG_RELEASE_DEBIAN_STRETCH" ]]; then
			CONFIG_RELEASE="stretch"
		elif [[ "y" == "$CONFIG_RELEASE_DEBIAN_TESTING" ]]; then
			CONFIG_RELEASE="testing"
		fi
	elif [[ "y" == "$CONFIG_DISTRO_UBUNTU" ]] ; then
		CONFIG_DISTRO="ubuntu"
		if [[ "y" == "$CONFIG_RELEASE_UBUNTU_TRUSTY" ]]; then
			CONFIG_RELEASE="trusty"
		elif [[ "y" == "$CONFIG_RELEASE_UBUNTU_XENIAL" ]]; then
			CONFIG_RELEASE="xenial"
		elif [[ "y" == "$CONFIG_RELEASE_UBUNTU_ZESTY" ]]; then
			CONFIG_RELEASE="zesty"
		elif [[ "y" == "$CONFIG_RELEASE_UBUNTU_ARTFUL" ]]; then
			CONFIG_RELEASE="artful"
		fi
	fi

	CONFIG_PROCESS_MANAGER=
	if [[ "y" == "$CONFIG_PROCESS_MANAGER_SYSTEMD" ]] ; then
		CONFIG_PROCESS_MANAGER="systemd"
	elif [[ "y" == "$CONFIG_PROCESS_MANAGER_SYSVINIT" ]] ; then
		CONFIG_PROCESS_MANAGER="sysvinit"
	elif [[ "y" == "$CONFIG_PROCESS_MANAGER_UPSTART" ]] ; then
		CONFIG_PROCESS_MANAGER="upstart"
	fi

	packages_config
	network_config
	declare -fF board_config > /dev/null && board_config
}

function require_rootfs_tar()
{
	require_workspace

	if [[ ! -f "$DIBS_WORKSPACE/rootfs.tar" ]] ; then
		echo "rootfs.tar not found!  Have you ran \"dibs build\" yet?"
		exit 1
	fi
}

function require_target_dir()
{
	require_workspace

	export DIBS_TARGET="$DIBS_WORKSPACE/target"

	if [[ ! -d "$DIBS_TARGET" ]] ; then
		echo "No target filesystem found. Did you run \"dibs untar\"?"
		exit 1
	fi
}

# assumes require_config has already been ran
function install_static_qemu()
{
	if [[ -z "$DIBS_TARGET" ]] || [["$DIBS_TARGET" == "/" ]] ; then
		echo "install_static_qemu function cowardly refusing to run."
		exit 1
	fi

	if [[ "$CONFIG_ARCH" == "armel" ]] || [[ "$CONFIG_ARCH" == "armhf" ]] ; then
		cp /usr/bin/qemu-arm-static "$DIBS_TARGET/usr/bin"
	elif [[ "$CONFIG_ARCH" == "arm64" ]] ; then
		cp /usr/bin/qemu-aarch64-static "$DIBS_TARGET/usr/bin"
	fi
}

# assumes require_config has already been ran
function uninstall_static_qemu()
{
	if [[ -z "$DIBS_TARGET" ]] || [["$DIBS_TARGET" == "/" ]] ; then
		echo "uninstall_static_qemu function cowardly refusing to run."
		exit 1
	fi

	if [[ "$CONFIG_ARCH" == "armel" ]] || [[ "$CONFIG_ARCH" == "armhf" ]] ; then
		rm -f "$DIBS_TARGET/usr/bin/qemu-arm-static"
	elif [[ "$CONFIG_ARCH" == "arm64" ]] ; then
		rm -f "$DIBS_TARGET/usr/bin/qemu-aarch64-static"
	fi
}

function unmount_target_subdirs()
{
	IFS=$'\n'
	for line in $(mount) ; do
		local mountpoint="$(echo $line | cut -d' ' -f3)"
		if [ "${mountpoint##$DIBS_TARGET/}" != "${mountpoint}" ] ; then
			umount -R "$mountpoint"
		fi
	done
	unset IFS
}

dibs_build_help="build: dibs build
    Runs multistrap and stage2 chroot processes."
function dibs_build()
{
	require_config

	pushd "$DIBS_WORKSPACE" > /dev/null
	export DIBS_TARGET="$DIBS_WORKSPACE/target"
	mkdir -p "$DIBS_TARGET"
	multistrap -f "$DIBS_WORKSPACE/config/multistrap.conf" || exit 1
	cd "$DIBS_TARGET"
	install_static_qemu
	chroot "$DIBS_TARGET" /stage2.sh
	network_postinstall
	system_postinstall
	declare -fF board_postinstall > /dev/null && board_postinstall
	uninstall_static_qemu
	dibs_tar
	popd > /dev/null
}

dibs_board_help="board: dibs board [name]
    Initializes a workspace with a given board name."
function dibs_board()
{
	local board=${1:-generic}

	if [[ ! -d "$DIBS_ROOT/boards/$board" ]] ; then
		echo "Board \"$board\" does not exist, aborting."
		return
	fi

	DIBS_WORKSPACE="$PWD"

	echo "board=$board" > .dibs_workspace

	mkdir -p "$DIBS_WORKSPACE/board" "$DIBS_WORKSPACE/config"
	shopt -s dotglob
	cp -r "$DIBS_ROOT/boards/$board/"* "$DIBS_WORKSPACE/board"
	shopt -u dotglob

	ln -sf "$DIBS_ROOT/dibs" $DIBS_WORKSPACE
}

dibs_config_help="config: dibs config
    Pre-build configuration. First runs kconfig-mconfig and then
    generates output files."
function dibs_config()
{
	require_workspace

	packages_generate
	declare -fF board_generate > /dev/null && board_generate
	pushd "$DIBS_WORKSPACE" > /dev/null
	kconfig-mconf "dibs/Kconfig"
	popd > /dev/null

	if [[ -f "$DIBS_WORKSPACE/config/config" ]] ; then
		dibs_regen
	fi
}

function dibs_help()
{
	var=dibs_${1}_help
	declare -p $var > /dev/null 2>&1 && echo "${!var}" || dibs_usage
	exit 1
}

dibs_regen_help="regen: dibs regen
    Rebuilds all configuration dependent files such as multistrap.conf."
function dibs_regen()
{
	require_config

	local f="$DIBS_WORKSPACE/config/stage2.sh"
	echo "#!/bin/sh" > $f
	echo >> $f
	echo "set -e" >> $f
	echo "export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true" >> $f
	echo "export LC_ALL=C LANGUAGE=C LANG=C" >> $f
	echo "/var/lib/dpkg/info/dash.preinst install" >> $f
	echo "dpkg --configure -a" >> $f
	echo "mount proc -t proc /proc" >> $f
	echo "dpkg --configure -a" >> $f
	echo "umount /proc" >> $f
	echo "rm /stage2.sh" >> $f
	chmod 755 $f

	local extra_packages
	if [[ "$CONFIG_PROCESS_MANAGER" == "systemd" ]] ; then
		extra_packages="systemd systemd-sysv udev"
	elif [[ "$CONFIG_PROCESS_MANAGER" == "sysvinit" ]] ; then
		extra_packages="sysvinit-core udev"
	elif [[ "$CONFIG_PROCESS_MANAGER" == "upstart" ]] ; then
		extra_packages="upstart upstart-udev-bridge udev"
	fi

	local f="$DIBS_WORKSPACE/config/multistrap.conf"
	echo "[General]" > $f
	echo "noauth=true" >> $f # FIXME ?
	echo "unpack=true" >> $f
	echo "debootstrap=${CONFIG_DISTRO^} Security" >> $f
	echo "aptsources=${CONFIG_DISTRO^} Security" >> $f
	echo "cleanup=true" >> $f
	echo "arch=$CONFIG_ARCH" >> $f
	echo "directory=target" >> $f
	echo "configscript=config/stage2.sh" >> $f
	echo >> $f
	if [[ "$CONFIG_DISTRO" == "debian" ]] ; then
		echo "[Debian]" >> $f
		echo "packages=$CONFIG_PACKAGES $extra_packages" >> $f
		echo "source=http://deb.debian.org/debian" >> $f
		echo "keyring=debian-archive-keyring" >> $f
		echo "components=main contrib non-free" >> $f
		echo "suite=$CONFIG_RELEASE" >> $f
		echo >> $f
		echo "[Security]" >> $f
		echo "packages=" >> $f
		echo "source=http://security.debian.org/" >> $f
		echo "keyring=debian-archive-keyring" >> $f
		echo "components=main contrib non-free" >> $f
		echo "suite=$CONFIG_RELEASE/updates" >> $f
	elif [[ "$CONFIG_DISTRO" == "ubuntu" ]] ; then
		echo "[Ubuntu]" >> $f
		echo "packages=$CONFIG_PACKAGES $extra_packages" >> $f
		if [[ "$CONFIG_ARCH" != "amd64" ]] && [[ "$CONFIG_ARCH" != "i386" ]] ; then
			echo "source=http://ports.ubuntu.com/ubuntu-ports" >> $f
		else
			echo "source=http://archive.ubuntu.com/ubuntu" >> $f
		fi
		echo "keyring=ubuntu-keyring" >> $f
		echo "components=main restricted universe multiverse" >> $f
		echo "suite=$CONFIG_RELEASE" >> $f
		echo >> $f
		echo "[Security]" >> $f
		echo "packages=" >> $f
		if [[ "$CONFIG_ARCH" != "amd64" ]] && [[ "$CONFIG_ARCH" != "i386" ]] ; then
			echo "source=http://ports.ubuntu.com/ubuntu-ports" >> $f
		else
			echo "source=http://archive.ubuntu.com/ubuntu" >> $f
		fi
		echo "keyring=ubuntu-keyring" >> $f
		echo "components=main restricted universe multiverse" >> $f
		echo "suite=$CONFIG_RELEASE-security" >> $f
	fi
}

dibs_shell_help="shell: dibs shell
    Extracts the rootfs into target, starts a chroot shell and
    re-tars the directory when the chroot exits."
function dibs_shell()
{
	require_config

	dibs_untar
	install_static_qemu
	mount -t devtmpfs devtmpfs "$DIBS_TARGET/dev"
	mount -t tmpfs tmpfs "$DIBS_TARGET/tmp"
	mount -t proc proc "$DIBS_TARGET/proc"

	local f="$DIBS_TARGET/chroot.sh"
	echo "#!/bin/bash" > $f
	echo >> $f
	echo "export LC_ALL=C LANGUAGE=C LANG=C" >> $f
	echo "rm -- \$0" >> $f
	echo "exec /bin/bash" >> $f
	chmod 755 $f
	chroot "$DIBS_TARGET" /chroot.sh
	uninstall_static_qemu
	dibs_tar
}

dibs_tar_help="tar: dibs tar
    Makes a rootfs.tar from the contents of target."
function dibs_tar()
{
	require_target_dir
	unmount_target_subdirs

	echo "Storing target directory as rootfs.tar, please wait..."
	pushd "$DIBS_TARGET" > /dev/null
	tar --one-file-system -cf "$DIBS_WORKSPACE/rootfs.tar" .
	popd > /dev/null
	rm -rf --one-file-system "$DIBS_TARGET"
}

dibs_untar_help="untar: dibs untar
    Extracts a rootfs.tar file into target directory."
function dibs_untar()
{
	require_rootfs_tar

	echo "Expanding rootfs.tar to target, please wait..."

	export DIBS_TARGET="$DIBS_WORKSPACE/target"
	mkdir -p "$DIBS_TARGET"
	pushd "$DIBS_TARGET" > /dev/null
	tar -xf "$DIBS_WORKSPACE/rootfs.tar"
	popd > /dev/null
}

function dibs_usage()
{
	echo "Usage:
    board
    build
    config [board]
    help
    regen
    shell
    tar
    untar
    usage"
	exit 1
}

command=$1
shift
if [[ -z "$command" ]] ; then
	dibs_usage "$@"
	exit 1
fi

declare -fF dibs_$command > /dev/null && dibs_$command "$@" || echo "Unknown command, see \"dibs help\"."
